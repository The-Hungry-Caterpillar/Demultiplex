def reverse_compliment(nucleotide_string)
	return(reverse compliment of nucleotide_string)


#creates empty output files from the information in the indexes_file
for index in indexes_file:
	make index_output_file_read1
	make index_output_file_read2
make index_hopping_file_read1
make index_hopping_file_read2
make bad_quality_read1
make bad_quality_read2


Then open all files with their code, e.g. :
B1_R1 = open('GTAGCGTA_read1', 'a') #this would be the read 1 file for the index 'GTAGCGTA'
and so on...


index_file_dictionary = { GTAGCGTA : (B1_R1, B1_R2) } #make a dictionary where the indexes are the keys, and the respective open file is the value


r1=open(read1_file)
i1=open(index1_file)
i2=open(index2_file)
r2=open(read2_file)


while True:
	
	#all of the readlines will be stripped of newline characters, I'm just too lazy to type it currently


	#read the first line of a record in each file, make one of them a temp header
	header = r1.readline() 
	i1.readline()
	i2.readline()
	r2.readline()


	#read the second line of a record in each file (the sequence)
	read1 = r1.readline()
	index1 = i1.readline()
	index2 = i2.readline()
	read2 = r2.readline()


	#read the third line of a record in each file (the plus sign)
	r1.readline()
	i1.readline()
	i2.readline()
	r2.readline()


	#read the fourth line of a record in each file (the quality scores)
	read1_qual = r1.readline()
	index1_qual = i1.readline()
	index2_qual = i2.readline()
	read2_qual = r2.readline()


	if index1 == reverse_compliment(index2): #this will append the read 1 record to the appropriate index file if the indexes match
		
		#let's make put the read1 record in the appropriate file
		index_file_dictionary[index1][0].write(header+index1+index2) #append header to index_output_file_read1
		index_file_dictionary[index1][0].write(read1)
		index_file_dictionary[index1][0].write('+')
		index_file_dictionary[index1][0].write(read1_qual)

		#now let's take care of read 2...
		index_file_dictionary[index1][1].write(header+index1+index2) #append header to index_output_file_read1
		index_file_dictionary[index1][1].write(read2)
		index_file_dictionary[index1][1].write('+')
		index_file_dictionary[index1][1].write(read2_qual)


	if index1 != reverse_compliment(index2): #if the indexes don't match...

		then do the same thing as the if loop directly above, but put the records in the index_swapped files

	if index1 or index2 have an 'N' (or bad quality score, I haven't decided yet...):

		then do the same thing as the if loop above, but put the records in the bad_quality files


	if r2.readline() == '':
		break

then close all the files